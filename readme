==============
BirdHouse v0.2
==============

Installation & Implementation
=============================

1. Get Dependencies

Go to: http://oauth.googlecode.com/svn/code/javascript/

    a. oauth.js
    b. sha1.js

2. Include and Initialize BirdHouse Class

Ti.include('birdhouse.js');

var BH = new BirdHouse({
    consumer_key: "yourappsconsumerkey",
    consumer_secret: "yourappsconsumersecretwhichislonger",
    callback_url: "http://yourappsEXACTcallbackurl.com"
});

3. Authorize or Make an API Call

At this point you can call six different functions:

    - authorize() - this initiates the authorization sequence, storing credentials in the app's directory in a file called 'twitter.config', returns void
    - deauthorize() - deletes the 'twitter.config' so the app no longer has the access tokens
    - authorized() - returns bool whether or not the user is authorized
    - get_tweets() - returns the last 20 tweets as an object (not as a string)
    - tweet(text) - sends a tweet with the given text and returns the response from twitter, which will be the tweet itself, as an object (not as a string)
    - api(url, method, params) - sends an api call to the given url by the given method with the given parameters which should be in url form, i.e. "count=20&since_id=13523859", and then returns the evaluated response; the responses are evaluated by:

        return eval('('+XHR.responseText+')');

With any call, if the user is not authorized it will initiate the authorization process, thus, there is no need to initiated the authorization process before hand unless, for some reason, you wanted to get it out of the way. So, for example, to get the latest tweets,

    var tweets = BH.get_tweets();

How the Authorization Works
===========================

This script does not use the OOB (Out-Of-Band) method, the one where it gets the pin. It actually does something pretty slick. After getting the request tokens, it opens a WebView that sends the user to the authorization page on Twitter's site, and listens for when the page has redirected the the callback_url. Note that this means you have to specify a callback url, that's the downfall. This can be eliminated with a more complex regular expression, but I simply have not done so yet.

Once the page is redirected to the callback url it extracts the oauth_verifier variable from the url and stores it. Then, that token, combined with the request token, is exchanged for access tokens which are then stored and can be re-used over and over. So, the general process looks like:

1. Get the Request Token

    a. Set the message paramters
    b. Set the url to send the XHR request to
    c. Send the XHR request
    d. Store the request token and token secret in cfg

2. Get the Request Verifier

    a. Open up a webview with the request token
    b. When webview has redirected to the Twitter app's callback,
       grab the request verifier from the URL
    c. Store the verifier in cfg
    d. Close the webview

3. Get the Access Token

    a. Set the message paramters
    b. Set the url to send the XHR request to
    c. Send the XHR request
    d. Store the request token and token secret in cfg

Debugging
=========

I have left in a ton of debug outputs to help developers navigate through what's happning. Please report on GitHub any issues or suggestions!

To Do
=====

1. Make a cleaned up, production version
2. More testing, esp. with iPhone
3. Add as much customization as possible
4. Better documentation and code comments

Known Issues
============

There are no known issues at this time.

Credits
=======

I must give credit to:

    - Netflix for the oauth.js, 
    - Paul Johnston and crew for sha1.js,
    - The oauth developers who made the examples here:
        http://oauth.googlecode.com/svn/code/javascript/
    - David Riccitelli for his script that is awesome, but doesn't work on Android,
        http://code.google.com/p/oauth-adapter/
    - Mike, my colleague at iEntry who initiated the BirdHouse project in PHP

